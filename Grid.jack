class Grid {
    field Array grid;          // 2D grid - at 1 there is part of ship, 0 is empty
    field Array opponent;
    field Array ships;        // array of Ship 
    field Array sizes;       // array of all unique length
    field Array validShips; // at the begining elements of validShips is length of each ship, -1 after add the ship
    field int shipsFound;

    constructor Grid new() { 
        do initialize2DArray();
        do initialzieOpponent();
        do initializeSizes();
        do initializevalidShips();
       
        let shipsFound = 0;
        let ships = Array.new(7);

        return this;
    }

    method void dispose() {
        var Array array;

        var int index;
        let index = 0;
        while (index < 10) {
            let array = grid[index];
            do array.dispose();
            let index = index + 1;
        }

        do grid.dispose();
        do opponent.dispose();
        do ships.dispose();
        do sizes.dispose();
        do validShips.dispose();

        return;
    }



    method void initializevalidShips() {
        let validShips = Array.new(7);

        let validShips[0] = 1;
        let validShips[1] = 1;
        let validShips[2] = 2;
        let validShips[3] = 2;
        let validShips[4] = 3;
        let validShips[5] = 4;
        let validShips[6] = 5;

        return;
    }

    method void initializeSizes() {
        let sizes = Array.new(5);

        let sizes[0] = 1;
        let sizes[1] = 2;
        let sizes[2] = 3;
        let sizes[3] = 4;
        let sizes[4] = 5;

        return;
    }

    method void initialize2DArray() {
        var Array array;
        var int i, j;
        let grid = Array.new(10);
        let i = 0;
        while (i < 10) {
            let array = Array.new(10);
            let j = 0;
            while (j < 10) {
                let array[j] = 0;
                let j = j + 1;
            }
            let grid[i] = array;
            let i = i + 1;
        }
        return;
    }

    method void initialzieOpponent() {
        var Array array;
        var int i, j;
        let opponent = Array.new(10);
        let i = 0;
        while (i < 10) {
            let array = Array.new(10);
            let j = 0;
            while (j < 10) {
                let array[j] = 0;
                let j = j + 1;
            }
            let opponent[i] = array;
            let i = i + 1;
        }
        return;

    }

    method boolean inBounds(int i, int j) {
        var boolean validI, validJ;
        let validI = (~(i < 0)) & (i < 10);
        let validJ = (~(j < 0)) & (j < 10);

        return validI & validJ;
    }

    /** method checks if there is part of ship at (i,j) or is empty space */
    method boolean isEmpty(int i, int j) {
        var Array array;
        let array = grid[i];
        
        return array[j] = 0;
    }

    method boolean validNeighbor(int i, int j) {
        if (~(inBounds(i, j))) {
            return true;
        }
        
        return isEmpty(i, j);
    }

    method void checkVertical(int i, int j, int size) {
        var Ship ship;
        var Array array;
        var int loop, curr;
        let loop = 0;
        let array = grid[i];            // check there is 
        while (loop < size) {          // length of 'size'
           let curr = j + loop;       // ones vertically
           if (inBounds(i, curr)) {
                if (array[curr] = 0) {
                    return;
                }
           } else {
               return;
           }
           let loop = loop + 1;
        }

        // check if there is any upper neighbor
        if ((~(validNeighbor(i, j - 1))) | (~(validNeighbor(i - 1, j - 1))) | (~(validNeighbor(i + 1, j - 1)))) {
            return;
        }        

        let loop = 0;
        while (loop < size) {                                                                       // check left and
            if ((~(validNeighbor(i - 1, j + loop))) | (~(validNeighbor(i + 1, j + loop)))) {       // right neighbors
                return;
            }
            let loop = loop + 1;
        }

        // check if there is any lower neighbor
        if ((~(validNeighbor(i, j + size))) | (~(validNeighbor(i - 1, j + size))) | (~(validNeighbor(i + 1, j + size)))) {
            return;
        }

        let loop = 0;
        while (loop < 7) {
            let curr = validShips[loop];
            if (curr = size) {                                      // if found free place for a ship
                let ship = Ship.new(i, j, size, true);             // save and stop 
                let ships[shipsFound] = ship;                     // searching
                let shipsFound = shipsFound + 1;
                let validShips[loop] = -1;
                return;
            }
            let loop = loop + 1;
        }

        return;
    }


    method void checkHorizonatl(int i, int j, int size) {
        var Ship ship;
        var Array array;
        var int loop, curr;
        let loop = 0;
        
        while (loop < size) {               
            let curr = i + loop;
            if (inBounds(curr, j)) {
                let array = grid[curr];       // check there is 
                if (array[j] = 0) {          // length of 'size' 
                    return;                 // ones horizontally
                }
            } else {
                return;
            }
            let loop = loop + 1;
        }

        // check if there is any left neighbor
        if ((~(validNeighbor(i - 1, j))) | (~(validNeighbor(i - 1, j - 1))) | (~(validNeighbor(i - 1, j + 1)))) {
            return;
        }

        let loop = 0;
        while (loop < size) {  // check upper and lower neighbors
            if ((~(validNeighbor(i + loop, j - 1))) | (~(validNeighbor(i + loop, j + 1)))) {    
                return;
            }
            let loop = loop + 1;
        }

        // check if there is any right neighbor
        if ((~(validNeighbor(i + size, j))) | (~(validNeighbor(i + size, j - 1))) | (~(validNeighbor(i + size, j + 1)))) {
            return;
        }

        let loop = 0;
        while (loop < 7) {
            let curr = validShips[loop];
            if (curr = size) {
                let ship = Ship.new(i, j, size, false);
                let ships[shipsFound] = ship;
                let shipsFound = shipsFound + 1;
                let validShips[loop] = -1;
                return;
            }
            let loop = loop + 1;
        }

        return;
    }

    method void resetShips() {
        do initializevalidShips();
        do initialize2DArray();
        let shipsFound = 0;

        return;
    }


    method void checkShip(int i, int j) {
        var int loop, size;
        let loop = 0;
        while (loop < 5) {
            let size = sizes[loop];
            do checkVertical(i, j, size);
            if (~(size = 1)) {               
                do checkHorizonatl(i, j, size);
            }
            let loop = loop + 1;
        }

        return;
    }

    method void findShips() {
        var Ship curr;
        var Array array;
        var int i, j;
        
        let i = 0;
        while (i < 10) {
            let array = grid[i];
            let j = 0;
            while (j < 10) {
                if (array[j] = 1) {
                    do checkShip(i, j);
                }
                let j = j + 1;
            }
            let i = i + 1;
        }
    
        return;
    }

    method boolean isMorePut() {
        var int i, j, count;
        var Array array;
        let count = 0;
        let i = 0;
        while (i < 10) {
            let array = grid[i];
            let j = 0;
            while (j < 10) {
                let count = count + array[j];
                let j = j + 1;
            }
            let i = i + 1;
        }

        return (count = 18); 
    }

    method boolean shipsAreValid() {
        var boolean allShipIsPut, noMoreIsPut;

        let allShipIsPut = (shipsFound = 7);
        let noMoreIsPut = isMorePut();
       
        return allShipIsPut & noMoreIsPut;
    }

    method void add(int i, int j, boolean shouldFill) {
        var Array array;
        var int val;
        if (shouldFill) {
            let val = 1;
        } else {
            let val = 0;
        }
        let array = grid[i];
        let array[j] = val;
        
        return;
    }

    

    /** for debuging */
    method void toString() {
        var Array array;

        var int i, j;
        let i = 0;
        while (i < 10) {
            
            let j = 0;
            while (j < 10) {
                let array = opponent[j];
                do Output.printInt(array[i]);
                let j = j + 1;
            }
            do Output.println();
            let i = i + 1;
        }
        do Output.println();
        return;
    }


    /** method returns computer's ships depending on arrangement of player's ships */
    method Array getRandomShips(int n) {
        var Array generatedShips;
        var Ship currShip;
        var int a, b, c, d, x, y, xMod, yMod, num1, num2;
        var boolean isVertical;

        let generatedShips = Array.new(7);

        // first 1x1 ship
        let currShip = ships[2];
        let a = currShip.getX();
        let currShip = ships[4];
        let b = currShip.getY();
        let currShip = ships[3];
        let c = currShip.getX();
        let currShip = ships[0];
        let d = currShip.getX();
        let isVertical = (Modulo.mod(a + d, 2) = 0);
        let num1 = (a + b + c) * n;
        let num2 = (c + d + a) * n;
        if (num1 < 0) {
            let num1 = 0 - num1;
        }
        if (num2 < 0) {
            let num2 = 0 - num2;
        }
        let x = Modulo.mod(num1, 10);
        let y = Modulo.mod(num2, 10);

        let currShip = Ship.new(x, y, 1, isVertical);
        let generatedShips[0] = currShip;


        // second 1x1 ship
        let currShip = ships[5];
        let a = currShip.getY();
        let currShip = ships[3];
        let b = currShip.getY();
        let currShip = ships[4];
        let c = currShip.getX();
        let currShip = ships[1];
        let d = currShip.getX();
        let isVertical = (Modulo.mod(a + d, 2) = 0);
        let num1 = (c + b) * n;
        let num2 = (c + d + b) * n;
        if (num1 < 0) {
            let num1 = 0 - num1;
        }
        if (num2 < 0) {
            let num2 = 0 - num2;
        }
        let x = Modulo.mod(num1, 10);
        let y = Modulo.mod(num2, 10);

        let currShip = Ship.new(x, y, 1, isVertical);
        let generatedShips[1] = currShip;


        // first 2x1 ship
        let currShip = ships[1];
        let a = currShip.getX();
        let currShip = ships[0];
        let b = currShip.getY();
        let currShip = ships[5];
        let c = currShip.getY();
        let currShip = ships[2];
        let d = currShip.getX();
        let isVertical = (Modulo.mod(a + d, 2) = 0);
        if (isVertical) {
            let xMod = 10;
            let yMod = 9;
        } else {
            let xMod = 9;
            let yMod = 10;
        }
        let num1 = (3 * a + b) * n;
        let num2 = (5 * b + 7 * c + d) * n;
        if (num1 < 0) {
            let num1 = 0 - num1;
        }
        if (num2 < 0) {
            let num2 = 0 - num2;
        }
        let x = Modulo.mod(num1, xMod);
        let y = Modulo.mod(num2, yMod);

        let currShip = Ship.new(x, y, 2, isVertical);
        let generatedShips[2] = currShip;


        // second 2x1 ship
        let currShip = ships[0];
        let a = currShip.getY();
        let currShip = ships[4];
        let b = currShip.getY();
        let currShip = ships[2];
        let c = currShip.getX();
        let currShip = ships[3];
        let d = currShip.getY();
        let isVertical = (Modulo.mod(a + d, 2) = 0);
        if (isVertical) {
            let xMod = 10;
            let yMod = 9;
        } else {
            let xMod = 9;
            let yMod = 10;
        }
        let num1 = (17 * d  + a) * n;
        let num2 = (19 * c + b) * n;
        if (num1 < 0) {
            let num1 = 0 - num1;
        }
        if (num2 < 0) {
            let num2 = 0 - num2;
        }
        let x = Modulo.mod(num1, xMod);
        let y = Modulo.mod(num2, yMod);

        let currShip = Ship.new(x, y, 2, isVertical);
        let generatedShips[3] = currShip;


        // 3x1 ship
        let currShip = ships[6];
        let a = currShip.getY();
        let currShip = ships[2];
        let b = currShip.getY();
        let currShip = ships[5];
        let c = currShip.getY();
        let currShip = ships[1];
        let d = currShip.getX();
        let isVertical = (Modulo.mod(a + d, 2) = 0);
        if (isVertical) {
            let xMod = 10;
            let yMod = 8;
        } else {
            let xMod = 8;
            let yMod = 10;
        }
        let num1 = (23 * b + c + 19 * d) * n;
        let num2 = (17 * c + 23 * d + a) * n;
        if (num1 < 0) {
            let num1 = 0 - num1;
        }
        if (num2 < 0) {
            let num2 = 0 - num2;
        }
        let x = Modulo.mod(num1, xMod);
        let y = Modulo.mod(num2, yMod);

        let currShip = Ship.new(x, y, 3, isVertical);
        let generatedShips[4] = currShip;


        // 4x1 ship
        let currShip = ships[3];
        let a = currShip.getX();
        let currShip = ships[2];
        let b = currShip.getY();
        let currShip = ships[1];
        let c = currShip.getX();
        let currShip = ships[0];
        let d = currShip.getY();
        let isVertical = (Modulo.mod(a + d, 2) = 0);
        if (isVertical) {
            let xMod = 10;
            let yMod = 7;
        } else {
            let xMod = 7;
            let yMod = 10;
        }
        let num1 = (13 * a + 7 * b + 3 * c) * n;
        let num2 = (11 * c + 19 * d) * n;
        if (num1 < 0) {
            let num1 = 0 - num1;
        }
        if (num2 < 0) {
            let num2 = 0 - num2;
        }
        let x = Modulo.mod(num1, xMod);
        let y = Modulo.mod(num2, yMod);

        let currShip = Ship.new(x, y, 4, isVertical);
        let generatedShips[5] = currShip;


        // 5x1 ship
        let currShip = ships[6];
        let a = currShip.getY();
        let currShip = ships[5];
        let b = currShip.getX();
         let currShip = ships[0];
        let c = currShip.getY();
        let currShip = ships[1];
        let d = currShip.getY();
        let isVertical = (Modulo.mod(a + d, 2) = 0);
        if (isVertical) {
            let xMod = 10;
            let yMod = 6;
        } else {
            let xMod = 6;
            let yMod = 10;
        }
        let num1 = (19 * a + b * 19) * n;
        let num2 = (11 * (c + d) + a) * n;
        if (num1 < 0) {
            let num1 = 0 - num1;
        }
        if (num2 < 0) {
            let num2 = 0 - num2;
        }
        let x = Modulo.mod(num1, xMod);
        let y = Modulo.mod(num2, yMod);

        let currShip = Ship.new(x, y, 5, isVertical);
        let generatedShips[6] = currShip;

        return generatedShips;
    }

    method void setShips(Array shipsArg) {
        do ships.dispose();
        let ships = shipsArg;

        return;
    }

    method void fillVertical(Ship currShip) {
        var Array array;
        var int i, j, size, index;
        let i = currShip.getX();
        let j = currShip.getY();
        let size = currShip.getSize();
        let array = grid[i];
        while (size > 0) {
            let index = j + size - 1;
            let array[index] = 1;
            let size = size - 1;
        }

        return;
    }

    method void fillHorizontal(Ship currShip) {
        var Array array;
        var int i, j, size, index;
        let i = currShip.getX();
        let j = currShip.getY();
        let size = currShip.getSize();

        while (size > 0) {
            
            let index = i + size - 1;
            let array = grid[index];
            let array[j] = 1;
            let size = size - 1;
        }

        return;
    }

    // todo fill 2d grid by ships
    method void fillGrid() {
        var Ship currShip;
        var int loop;
        let loop = 0;
        while (loop < 7) {
            let currShip = ships[loop];
            if (currShip.isVert()) {
                do fillVertical(currShip);
            } else {
                do fillHorizontal(currShip);
            }
            let loop = loop + 1;
        }
        return;
    }

    method Array getGrid() {
        return grid;
    }

    method void setGrid(Array gridArg) {
        let grid = gridArg;
        return;
    }

    method Ship findShipAt(int i, int j) {
        var Ship ship;
        var int loop, size, num;
        let loop = 0;
        while (loop < 7) {
            let ship = ships[loop];
            let size = ship.getSize();
            if (ship.isVert()) {
                if (i = ship.getX()) {
                   let num = ship.getY() + size;
                   if (num > j) {
                       return ship;
                   }
                }
            } else {
                if (j = ship.getY()) {
                    let num = ship.getX() + size;
                    if (num > i) {
                        return ship;
                    }
                }
            }
            let loop = loop + 1;
        }
        return ship;
    }

    method void strike(int i, int j) {
        var Array array;
        let array = opponent[i];
        let array[j] = 1;

        return;
    }

    method void miss(int i, int j) {
        var Array array;
        let array = opponent[i];
        let array[j] = 2;

        return;
    }

    method void destroy(int i, int j) {
        var Array array;
        let array = opponent[i];
        let array[j] = 3;

        return; 
    }

    method boolean alreadyShot(int i, int j) {
        var Array array;
        let array = opponent[i];

        return (~(array[j] = 0));
    }


}